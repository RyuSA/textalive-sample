{"version":3,"sources":["PlayerControl.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PlayerControl","props","useState","status","setStatus","useEffect","listener","onPlay","onPause","onStop","player","addListener","removeListener","handlePlay","useCallback","requestPlay","handlePause","requestPause","handleStop","requestStop","className","onClick","disabled","readyToStart","App","setPlayer","app","setApp","phrase","setPhrase","appStatus","setAppStatus","mediaElement","useRef","window","p","Player","token","current","playerListener","onAppReady","songUrl","createFromSongUrl","onVideoReady","video","firstChar","parent","next","animate","now","startTime","endTime","text","onTimerReady","dispose","mainContent","managed","waiting","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAUaA,EAAgB,SAACC,GAAyB,IAAD,EACxBC,mBAAS,QADe,mBAC7CC,EAD6C,KACrCC,EADqC,KAGpDC,qBAAU,WACR,IAAMC,EAA2B,CAC/BC,OAAQ,kBAAMH,EAAU,SACxBI,QAAS,kBAAMJ,EAAU,UACzBK,OAAQ,kBAAML,EAAU,UAG1B,OADAH,EAAMS,OAAOC,YAAYL,GAClB,WAAQL,EAAMS,OAAOE,eAAeN,MAC1C,CAACL,EAAMS,SAEV,IAAMG,EAAaC,uBAAY,kBAAMb,EAAMS,QAAUT,EAAMS,OAAOK,gBAAe,CAC/Ed,EAAMS,SAEFM,EAAcF,uBAAY,kBAAMb,EAAMS,QAAUT,EAAMS,OAAOO,iBAAgB,CACjFhB,EAAMS,SAEFQ,EAAaJ,uBAAY,kBAAMb,EAAMS,QAAUT,EAAMS,OAAOS,gBAAe,CAC/ElB,EAAMS,SAGR,OACE,sBAAKU,UAAU,UAAf,UACE,wBAAQC,QAAoB,SAAXlB,EAAoBU,EAAaG,EAAaM,SAAUrB,EAAMqB,SAA/E,SACc,SAAXnB,EAAoB,eAAO,6BAE9B,wBAAQkB,QAASH,EAAYI,SAAUrB,EAAMqB,UAAuB,SAAXnB,EAAzD,8BC5BAoB,EAA0B,2BA8EjBC,EA5EH,WAAO,IAAD,EAEYtB,qBAFZ,mBAETQ,EAFS,KAEDe,EAFC,OAGMvB,qBAHN,mBAGTwB,EAHS,KAGJC,EAHI,OAIYzB,mBAAiB,IAJ7B,mBAIT0B,EAJS,KAIDC,EAJC,OAKkB3B,mBAVA,kCAKlB,mBAKT4B,EALS,KAKEC,EALF,KAMVC,EAAeC,iBAAuB,MAE5C5B,qBAAU,WACR,GAAsB,qBAAX6B,QAA2BF,EAAtC,CAGA,IAAMG,EAAI,IAAIC,IAAO,CACnBV,IAAK,CACHW,MAAO,oBAETL,aAAcA,EAAaM,UAGvBC,EAAiC,CACrCC,WAAY,SAACd,GACXK,EAzB0B,iDA0BrBL,EAAIe,SACPN,EAAEO,kBAAkB,+CAEtBf,EAAOD,IAETiB,aAAc,WACZZ,EA/B0B,oDAkC1B,IADA,IAAIH,EAASO,EAAES,MAAMC,UAAUC,OAAOA,OAC/BlB,GAAUA,EAAOmB,MACtBnB,EAAOoB,QAAU,SAACC,EAAKd,GAGjBA,EAAEe,UAAY,KAAOD,GAAOd,EAAEgB,QAAU,IAAMF,GAChDpB,EAAUM,EAAEiB,OAGhBxB,EAASA,EAAOmB,MAGpBM,aAAc,WACZtB,EAAaR,KAKjB,OAFAY,EAAExB,YAAY4B,GACdd,EAAUU,GACH,WACLA,EAAEvB,eAAe2B,GACjBJ,EAAEmB,cAEH,CAACtB,IAEJ,IAAMuB,EAAc,qCACf7C,GAAUgB,GACT,qBAAKN,UAAU,WAAf,SACE,cAAC,EAAD,CAAeE,SAAUI,EAAI8B,QAAS9C,OAAQA,MAGlD,qBAAKU,UAAU,SAAf,SACGQ,OAID6B,EAAU,mCACb3B,IAEH,OACE,sBAAKV,UAAU,MAAf,UACGU,IAAcP,EAAckC,EAAUF,EACvC,qBAAKnC,UAAU,QAAQsC,IAAK1B,QCrEnB2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7bd634c3.chunk.js","sourcesContent":["// clone from https://github.com/TextAliveJp/textalive-app-params/blob/master/src/PlayerControl.jsx\nimport { useCallback, useEffect, useState } from 'react';\nimport './App.css';\nimport { Player, PlayerListener } from \"textalive-app-api\";\n\ninterface ControlProps {\n  disabled: boolean\n  player: Player\n}\n\nexport const PlayerControl = (props: ControlProps) => {\n  const [status, setStatus] = useState(\"stop\");\n\n  useEffect(() => {\n    const listener: PlayerListener = {\n      onPlay: () => setStatus(\"play\"),\n      onPause: () => setStatus(\"pause\"),\n      onStop: () => setStatus(\"stop\"),\n    };\n    props.player.addListener(listener);\n    return () => { props.player.removeListener(listener) };\n  }, [props.player]);\n\n  const handlePlay = useCallback(() => props.player && props.player.requestPlay(), [\n    props.player,\n  ]);\n  const handlePause = useCallback(() => props.player && props.player.requestPause(), [\n    props.player,\n  ]);\n  const handleStop = useCallback(() => props.player && props.player.requestStop(), [\n    props.player,\n  ]);\n\n  return (\n    <div className=\"control\">\n      <button onClick={status !== \"play\" ? handlePlay : handlePause} disabled={props.disabled}      >\n        {status !== \"play\" ? \"再生\" : \"一時停止\"}\n      </button>\n      <button onClick={handleStop} disabled={props.disabled || status === \"stop\"}      >\n        停止\n      </button>\n    </div>\n  );\n};\n","import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { IPlayerApp, Player, PlayerListener } from \"textalive-app-api\";\nimport { PlayerControl } from \"./PlayerControl\";\n\ntype AppStatus = string;\n\nconst findingTextAlive: AppStatus = \"TextAlive接続中...\"\nconst foundTextAlive: AppStatus = \"TextAliveへの接続完了\"\nconst foundMusicMeta: AppStatus = \"楽曲情報取得完了\"\nconst readyToStart: AppStatus = \"準備完了\"\n\nconst App = () => {\n\n  const [player, setPlayer] = useState<Player>();\n  const [app, setApp] = useState<IPlayerApp>();\n  const [phrase, setPhrase] = useState<string>(\"\");\n  const [appStatus, setAppStatus] = useState<AppStatus>(findingTextAlive);\n  const mediaElement = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (typeof window === \"undefined\" || !mediaElement) {\n      return;\n    }\n    const p = new Player({\n      app: {\n        token: \"pAPSS0hUiAxyMyJr\",\n      },\n      mediaElement: mediaElement.current!,\n    });\n\n    const playerListener: PlayerListener = {\n      onAppReady: (app) => {\n        setAppStatus(foundTextAlive)\n        if (!app.songUrl) {\n          p.createFromSongUrl(\"https://www.youtube.com/watch?v=xOKplMgHxxA\");\n        }\n        setApp(app);\n      },\n      onVideoReady: () => {\n        setAppStatus(foundMusicMeta)\n        // 最初のフレーズを取得し、while文で全フレーズを舐め回し画面描写のタイミングを登録する\n        let phrase = p.video.firstChar.parent.parent;\n        while (phrase && phrase.next) {\n          phrase.animate = (now, p) => {\n            // ジャストで表示させると若干のユーザー目線若干の違和感あり\n            // 500msec先取りのフレーズを表示することで画面上の違和感がなくなった\n            if (p.startTime - 500 <= now && p.endTime - 500 > now) {\n              setPhrase(p.text);\n            }\n          };\n          phrase = phrase.next;\n        }\n      },\n      onTimerReady: () => {\n        setAppStatus(readyToStart);\n      }\n    };\n    p.addListener(playerListener);\n    setPlayer(p);\n    return () => {\n      p.removeListener(playerListener);\n      p.dispose();\n    };\n  }, [mediaElement]);\n\n  const mainContent = <>\n      {player && app && (\n        <div className=\"controls\">\n          <PlayerControl disabled={app.managed} player={player} />\n        </div>\n      )}\n      <div className=\"phrase\">\n        {phrase}\n      </div>\n  </>\n\n  const waiting = <>\n    {appStatus}\n  </>\n  return (\n    <div className=\"App\">\n      {appStatus !== readyToStart? waiting : mainContent}\n      <div className=\"media\" ref={mediaElement} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}